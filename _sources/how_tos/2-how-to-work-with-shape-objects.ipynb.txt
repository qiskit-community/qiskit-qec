{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "936adb0d",
   "metadata": {},
   "source": [
    "# How-to: work with geometry objects\n",
    "\n",
    "The QEC Framework has some primitive geometric classes used to store geometric structures. At present these structures only consist of vertices, edges, wireframes, faces and shells. \n",
    "\n",
    "- A `Vertex` is a point in space\n",
    "- An `Edge` is a list of `Vertex`s (so hyperedges are allowed and so are self loops).\n",
    "- A `Wireframe` is a list of `Edge`s\n",
    "- A `Face` is a list of `Wireframe`s\n",
    "- A `Shell` is a list of `Faces`\n",
    "\n",
    "Vertices may have qubits associated with them. Currently this is not possible with edges etc. but this will be added in the future. An operator (Pauli operator) is associated with the `Face` and a set of Pauli operators is assocoiated with a `Shell`.\n",
    "\n",
    "The geometry system currently being used is a intermediate step until a solid geometry C++ library is created and implemented. Thus the current geometry work is not necessarily fast or fully featured.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "952eb784",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "from qiskit_qec.operators.pauli import Pauli\n",
    "\n",
    "from qiskit_qec.geometry.model.qubit_count import QubitCount\n",
    "from qiskit_qec.geometry.model.qubit_data import QubitData\n",
    "from qiskit_qec.geometry.model.vertex import Vertex\n",
    "from qiskit_qec.geometry.model.edge import Edge\n",
    "from qiskit_qec.geometry.model.wireframe import WireFrame\n",
    "from qiskit_qec.geometry.model.face import Face\n",
    "from qiskit_qec.geometry.model.shell import Shell\n",
    "\n",
    "\n",
    "# Create a square faces that represent an XXXX operator and a ZZZZ operator that\n",
    "# share a common edge.\n",
    "\n",
    "X_OPERATOR = Pauli(\"X\")\n",
    "Z_OPERATOR = Pauli(\"Z\")\n",
    "Y_OPERATOR = Pauli(\"Y\")\n",
    "\n",
    "qubit_count = QubitCount()\n",
    "qubit_data = QubitData()\n",
    "\n",
    "v1 = Vertex(np.array([0, 1]))\n",
    "qubit_data.qubit[v1.id] = qubit_count.new_qubit()\n",
    "qubit_count.increment_qubit(qubit_data.qubit[v1.id])\n",
    "qubit_data.operator[v1.id] = X_OPERATOR\n",
    "\n",
    "v2 = Vertex(np.array([1, 0]))\n",
    "qubit_data.qubit[v2.id] = qubit_count.new_qubit()\n",
    "qubit_count.increment_qubit(qubit_data.qubit[v2.id])\n",
    "qubit_data.operator[v2.id] = X_OPERATOR\n",
    "\n",
    "v3 = Vertex(np.array([1, 1]))\n",
    "qubit_data.qubit[v3.id] = qubit_count.new_qubit()\n",
    "qubit_count.increment_qubit(qubit_data.qubit[v3.id])\n",
    "qubit_data.operator[v3.id] = X_OPERATOR\n",
    "\n",
    "v4 = Vertex(np.array([0, 0]))\n",
    "qubit_data.qubit[v4.id] = qubit_count.new_qubit()\n",
    "qubit_count.increment_qubit(qubit_data.qubit[v4.id])\n",
    "qubit_data.operator[v4.id] = X_OPERATOR\n",
    "\n",
    "\n",
    "e1 = Edge([v4, v2])\n",
    "e2 = Edge([v2, v3])\n",
    "e3 = Edge([v3, v1])\n",
    "e4 = Edge([v1, v4])\n",
    "\n",
    "wf1 = WireFrame([e1, e2, e3, e4])\n",
    "f1 = Face([wf1])\n",
    "\n",
    "v5 = Vertex(np.array([1, 0]))\n",
    "qubit_data.qubit[v5.id] = qubit_data.qubit[v1.id]\n",
    "qubit_count.increment_qubit(qubit_data.qubit[v1.id])\n",
    "qubit_data.operator[v5.id] = Z_OPERATOR\n",
    "\n",
    "v6 = Vertex(np.array([1, 1]))\n",
    "qubit_data.qubit[v6.id] = qubit_data.qubit[v3.id]\n",
    "qubit_count.increment_qubit(qubit_data.qubit[v3.id])\n",
    "qubit_data.operator[v6.id] = Z_OPERATOR\n",
    "\n",
    "v7 = Vertex(np.array([2, 0]))\n",
    "qubit_data.qubit[v7.id] = qubit_count.new_qubit()\n",
    "qubit_count.increment_qubit(qubit_data.qubit[v7.id])\n",
    "qubit_data.operator[v7.id] = Z_OPERATOR\n",
    "\n",
    "v8 = Vertex(np.array([2, 1]))\n",
    "qubit_data.qubit[v8.id] = qubit_count.new_qubit()\n",
    "qubit_count.increment_qubit(qubit_data.qubit[v8.id])\n",
    "qubit_data.operator[v8.id] = Z_OPERATOR\n",
    "\n",
    "\n",
    "e5 = Edge([v5, v6])\n",
    "e6 = Edge([v6, v8])\n",
    "e7 = Edge([v8, v7])\n",
    "e8 = Edge([v7, v5])\n",
    "\n",
    "wf2 = WireFrame([e5, e5, e6, e7])\n",
    "f2 = Face([wf2])\n",
    "\n",
    "s = Shell([f1, f2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4cc2c85f",
   "metadata": {
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA04AAAMtCAYAAACowCF1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABBtUlEQVR4nO3de3RV9Z3w/08SJKA1QYokZIyC2mKxCBZLitVWaxSUccFPZyqMVx7FR8XO2NhWWauFWucpan3UcQrSWhWdUVFbL2PtoBRFi6JMQR4vgyx18AoBL4UDyEXI/v2RcvTI5RuQQ4C8XmudBWef79n57s0mnDf7nJ2SLMuyAAAAYLNKW3sCAAAAOzvhBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACChXWtPoDU0NTXFwoULY++9946SkpLWng4AANBKsiyL5cuXR01NTZSWbv68UpsMp4ULF0ZtbW1rTwMAANhJvP3227Hffvtt9vE2GU577713RDTvnIqKilaeDQAA0FpyuVzU1tbmG2Fz2mQ4bXh7XkVFhXACAACSH+FxcQgAAIAE4QQAAJAgnAAAABKEEwAAQIJwAgAASBBOAAAACcIJAAAgQTgBAAAkCCcAAIAE4QQAAJAgnAAAABKEEwAAQIJwAgAASBBOAAAACcIJAAAgQTgBAAAkCCcAAIAE4QQAAJAgnAAAABKEEwAAQIJwAgAASBBOAAAACcIJAAAgQTgBAAAkCCcAAIAE4QQAAJBQ1HB66qmn4uSTT46ampooKSmJBx98cIvjp0+fHiUlJRvdGhsbC8aNHz8+unfvHh06dIi6urqYNWtWEbcCAABo64oaTitXrow+ffrE+PHjt+p58+fPj0WLFuVvXbt2zT92zz33RENDQ4wdOzbmzJkTffr0iYEDB8aSJUu29/QBAAAiIqJdMVd+4oknxoknnrjVz+vatWt06tRpk49dd911MXLkyBgxYkREREycODEeeeSRuPXWW+Pyyy//PNMFAADYpJ3yM059+/aNbt26xfHHHx9PP/10fvnatWtj9uzZUV9fn19WWloa9fX1MXPmzM2ub82aNZHL5QpuAAAALbVThVO3bt1i4sSJ8bvf/S5+97vfRW1tbRxzzDExZ86ciIh4//33Y/369VFVVVXwvKqqqo0+B/Vp48aNi8rKyvyttra2qNsBAADsXor6Vr2t1bNnz+jZs2f+/pFHHhmvv/56XH/99fFv//Zv27ze0aNHR0NDQ/5+LpcTTwAAQIvtVOG0Kf37948ZM2ZERESXLl2irKwsFi9eXDBm8eLFUV1dvdl1lJeXR3l5eVHnCQAA7L52qrfqbcrcuXOjW7duERHRvn376NevX0ybNi3/eFNTU0ybNi0GDBjQWlMEAAB2c0U947RixYp47bXX8vcXLFgQc+fOjc6dO8f+++8fo0ePjnfffTfuuOOOiIi44YYbokePHnHooYfG6tWr4ze/+U08/vjj8dhjj+XX0dDQEGeffXYcccQR0b9//7jhhhti5cqV+avsAQAAbG9FDac///nPceyxx+bvb/ic0dlnnx2TJk2KRYsWxVtvvZV/fO3atXHppZfGu+++G3vuuWccdthh8cc//rFgHaeddlq89957MWbMmGhsbIy+ffvGlClTNrpgBAAAwPZSkmVZ1tqT2NFyuVxUVlbGsmXLoqKiorWnAwAAtJKWtsFO/xknAACA1iacAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJRQ2np556Kk4++eSoqamJkpKSePDBB7c4/v7774/jjz8+9t1336ioqIgBAwbEo48+WjDmpz/9aZSUlBTcDjnkkCJuBQAA0NYVNZxWrlwZffr0ifHjx7do/FNPPRXHH398/OEPf4jZs2fHscceGyeffHI8//zzBeMOPfTQWLRoUf42Y8aMYkwfAAAgIiLaFXPlJ554Ypx44oktHn/DDTcU3P/5z38eDz30UDz88MNx+OGH55e3a9cuqqurt9c0AQAAtmin/oxTU1NTLF++PDp37lyw/NVXX42ampo48MAD4/TTT4+33npri+tZs2ZN5HK5ghsAAEBL7dThdO2118aKFSviu9/9bn5ZXV1dTJo0KaZMmRI33XRTLFiwII4++uhYvnz5Ztczbty4qKyszN9qa2t3xPQBAIDdREmWZdkO+UIlJfHAAw/E0KFDWzT+rrvuipEjR8ZDDz0U9fX1mx23dOnSOOCAA+K6666Lc889d5Nj1qxZE2vWrMnfz+VyUVtbG8uWLYuKioqt2g4AAGD3kcvlorKyMtkGRf2M07aaPHlynHfeeXHfffdtMZoiIjp16hRf/vKX47XXXtvsmPLy8igvL9/e0wQAANqIne6tenfffXeMGDEi7r777hg8eHBy/IoVK+L111+Pbt267YDZAQAAbVFRzzitWLGi4EzQggULYu7cudG5c+fYf//9Y/To0fHuu+/GHXfcERHNb887++yz41/+5V+irq4uGhsbIyKiY8eOUVlZGRERP/jBD+Lkk0+OAw44IBYuXBhjx46NsrKyGD58eDE3BQAAaMOKesbpz3/+cxx++OH5S4k3NDTE4YcfHmPGjImIiEWLFhVcEe/Xv/51rFu3LkaNGhXdunXL3/7pn/4pP+add96J4cOHR8+ePeO73/1ufPGLX4xnn3029t1332JuCgAA0IbtsItD7Exa+gEwAABg99bSNtjpPuMEAACwsxFOAAAACcIJAAAgQTgBAAAkCCcAAIAE4QQAAJAgnAAAABKEEwAAQIJwAgAASBBOAAAACcIJAAAgQTgBAAAkCCcAAIAE4QQAAJAgnAAAABKEEwAAQIJwAgAASBBOAAAACcIJAAAgQTgBAAAkCCcAAIAE4QQAAJAgnAAAABKEEwAAQIJwAgAASBBOAAAACcIJAAAgQTgBAAAkCCcAAIAE4QQAAJAgnAAAABKEEwAAQIJwAgAASBBOAAAACcIJAAAgQTgBAAAkCCcAAIAE4QQAAJAgnAAAABKEEwAAQIJwAgAASBBOAAAACcIJAAAgQTgBAAAkCCcAAIAE4QQAAJAgnAAAABKEEwAAQIJwAgAASBBOAAAACcIJAAAgQTgBAAAkCCcAAIAE4QQAAJAgnAAAABKEEwAAQIJwAgAASBBOAAAACcIJAAAgQTgBAAAkCCcAAIAE4QQAAJAgnAAAABKEEwAAQIJwAgAASBBOAAAACcIJAAAgQTgBAAAkCCcAAIAE4QQAAJAgnAAAABKEEwAAQIJwAgAASBBOAAAACcIJAAAgQTi1slWrVsXixYtj1apVrT0VgDblww8/jJdeeik+/PDD1p4KQJuzK74GFk6tZMaMGXHKKafEF77whaiuro4vfOELccopp8TTTz/d2lMD2K1NmDAhampq4otf/GL07t07vvjFL0ZNTU3cdNNNrT01gN3ervwauKjh9NRTT8XJJ58cNTU1UVJSEg8++GDyOdOnT4+vfe1rUV5eHgcffHBMmjRpozHjx4+P7t27R4cOHaKuri5mzZq1/SdfRDfddFN861vfiocffjiampoiIqKpqSkefvjhOProo2PixImtPEOA3dPw4cNj1KhRsWjRooLlixYtiosuuij+4R/+oZVmBrD729VfAxc1nFauXBl9+vSJ8ePHt2j8ggULYvDgwXHsscfG3Llz45JLLonzzjsvHn300fyYe+65JxoaGmLs2LExZ86c6NOnTwwcODCWLFlSrM3YrmbMmBGjRo2KLMti3bp1BY+tW7cusiyLiy66aJeoboBdyYQJE2Ly5MlbHHP33Xc78wRQBLvDa+CSLMuyHfKFSkrigQceiKFDh252zGWXXRaPPPJIvPTSS/llw4YNi6VLl8aUKVMiIqKuri6+/vWvxy9/+cuIaK7U2tra+N73vheXX355i+aSy+WisrIyli1bFhUVFdu+UdvglFNOiYcffnijA+bT2rVrF0OGDInf/va3O3BmALu3mpqajc40bW7cu+++uwNmBNB27MyvgVvaBu124JySZs6cGfX19QXLBg4cGJdccklERKxduzZmz54do0ePzj9eWloa9fX1MXPmzM2ud82aNbFmzZr8/Vwut30n3kKrVq2Khx56KH9qcnPWrVsXDzzwQDzzzDPRoUOHHTQ7gN3XsmXLWhRNERELFy6MJ554IiorK4s8K4C2YfXq1Vv1GnjVqlXRsWPHHTS7ltupwqmxsTGqqqoKllVVVUUul4tVq1bFX/7yl1i/fv0mx7zyyiubXe+4cePiiiuuKMqc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jNra2jjhhBPi3XffLRg3aNCgWLRoUf529913F3tTAACANqro4XTdddfFyJEjY8SIEdGrV6+YOHFi7LnnnnHrrbducvydd94ZF110UfTt2zcOOeSQ+M1vfhNNTU0xbdq0gnHl5eVRXV2dv+2zzz6bncOaNWsil8sV3AAAAFqqqOG0du3amD17dtTX13/yBUtLo76+PmbOnNmidXz00Ufx8ccfR+fOnQuWT58+Pbp27Ro9e/aMCy+8MD744IPNrmPcuHFRWVmZv9XW1m7bBgEAAG1SUcPp/fffj/Xr10dVVVXB8qqqqmhsbGzROi677LKoqakpiK9BgwbFHXfcEdOmTYurr746nnzyyTjxxBNj/fr1m1zH6NGjY9myZfnb22+/ve0bBQAAtDntWnsCW3LVVVfF5MmTY/r06dGhQ4f88mHDhuV/37t37zjssMPioIMOiunTp8dxxx230XrKy8ujvLx8h8wZAADY/RT1jFOXLl2irKwsFi9eXLB88eLFUV1dvcXnXnvttXHVVVfFY489FocddtgWxx544IHRpUuXeO211z73nAEAAD6rqOHUvn376NevX8GFHTZc6GHAgAGbfd4111wTV155ZUyZMiWOOOKI5Nd555134oMPPohu3bptl3kDAAB8WtGvqtfQ0BA333xz3H777TFv3ry48MILY+XKlTFixIiIiDjrrLNi9OjR+fFXX311/OQnP4lbb701unfvHo2NjdHY2BgrVqyIiIgVK1bED3/4w3j22WfjjTfeiGnTpsWQIUPi4IMPjoEDBxZ7cwAAgDao6J9xOu200+K9996LMWPGRGNjY/Tt2zemTJmSv2DEW2+9FaWln/TbTTfdFGvXro2/+7u/K1jP2LFj46c//WmUlZXFCy+8ELfffnssXbo0ampq4oQTTogrr7zS55gAAICi2CEXh7j44ovj4osv3uRj06dPL7j/xhtvbHFdHTt2jEcffXQ7zQwAACCt6G/VAwAA2NUJJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgATh1MpWr17d/Jt1rTsPgDZnbfMvy5a17jQA2qINL4Hzr4V3AcKplcyYMSNOOeWUOProo5sX3BYRkyPirdacFUAbMCsiro2I3zff/c53ImpqIm66qTUnBdA2zJgRccopERteAh999NFxyimnxNNPP926E2uBkizLstaexI6Wy+WisrIyli1bFhUVFTv86990000xatSoKCsri3XrPnWqqTQimiJicER8fYdPC2D399uIeGnzDw8fHnHXXTtsNgBtyk03RYwaFVFWFvHpl8Dt2rWL9evXx4QJE+KCCy7Y4fNqaRvskDNO48ePj+7du0eHDh2irq4uZs2atcXx9913XxxyyCHRoUOH6N27d/zhD38oeDzLshgzZkx069YtOnbsGPX19fHqq68WcxO2mxkzZsSoUaMiy7LCaIpojqaIiEfCmSeA7W1WbDGaIiLuvtuZJ4BimDGjOZqyrDCaIiLWrVsXWZbFRRddtFOfeSp6ON1zzz3R0NAQY8eOjTlz5kSfPn1i4MCBsWTJkk2Of+aZZ2L48OFx7rnnxvPPPx9Dhw6NoUOHxksvffKv3TXXXBM33nhjTJw4MZ577rnYa6+9YuDAgbvEeySvu+66KCsr2/Kg0oiYuUOmA9B2PNWyYf/8z8WdBkBbdN11zWeatqSsrCyuv/76HTOhbVD0t+rV1dXF17/+9fjlL38ZERFNTU1RW1sb3/ve9+Lyyy/faPxpp50WK1eujN///vf5Zd/4xjeib9++MXHixMiyLGpqauLSSy+NH/zgBxERsWzZsqiqqopJkybFsGHDNlrnmjVrYs2aNfn7uVwuamtrd/hb9VatWhVf+MIXoqmpKT24JCJGRES7Ys8KoA1YHRF3tHz4449HVFYWbTYAbcrq1c2faWrJS+DS0tJYsWJFdOzYsfgT+6uWvlWvqC/L165dG7Nnz47Ro0fnl5WWlkZ9fX3MnLnpUyozZ86MhoaGgmUDBw6MBx98MCIiFixYEI2NjVFfX59/vLKyMurq6mLmzJmbDKdx48bFFVdcsR226PPJ5XIti6aIiCwibi3qdADYjO98p7VnANA2NTU1RS6X26Hh1FJFDaf3338/1q9fH1VVVQXLq6qq4pVXXtnkcxobGzc5vrGxMf/4hmWbG/NZo0ePLoixDWecdrSKioooLS1tUTyVlpbGn/70p+jQocMOmBnA7m3ZsmXxna2ooccffzwqnXIC2C5Wr14dRx99dItfA7fGxdtaok28Eay8vDzKy8tbexrRsWPHGDJkSDz88MMbXxjiU9q1axdDhgyJI488cgfODmD31q1bt1i0aFFyXE1NTRx77LE7YEYAbcfWvAbeGc82RRT54hBdunSJsrKyWLx4ccHyxYsXR3V19SafU11dvcXxG37dmnXuTBoaGmL9+vVbHLN+/fr4/ve/v4NmBNA2/PjHP96u4wBoud3hNXBRw6l9+/bRr1+/mDZtWn5ZU1NTTJs2LQYMGLDJ5wwYMKBgfETE1KlT8+N79OgR1dXVBWNyuVw899xzm13nzuSoo46KCRMmRElJSbRrV3jCr127dlFSUhITJkyIb37zm600Q4Dd00UXXRTDhw/f4pjhw4fHhRdeuINmBNB27BavgbMimzx5clZeXp5NmjQp++///u/s/PPPzzp16pQ1NjZmWZZlZ555Znb55Zfnxz/99NNZu3btsmuvvTabN29eNnbs2GyPPfbIXnzxxfyYq666KuvUqVP20EMPZS+88EI2ZMiQrEePHtmqVataNKdly5ZlEZEtW7Zs+27sVpgxY0Z26qmnZqWlpVlEZKWlpdmpp56azZgxo9XmBNAWTJgwIaupqcmi+TI8WURkNTU12YQJE1p7agC7vZ3xNXBL26DolyOPiPjlL38Zv/jFL6KxsTH69u0bN954Y9TV1UVExDHHHBPdu3ePSZMm5cffd9998eMf/zjeeOON+NKXvhTXXHNNnHTSSZ+OvRg7dmz8+te/jqVLl+YL9stf/nKL5tPSSw7uCKtWrYpcLhcVFRU77fs5AXZHH374YSxcuDBqamqic+fOrT0dgDZlZ3oN3NI22CHhtLPZmcIJAABoPS1tg6J+xgkAAGB3IJwAAAAShBMAAECCcAIAAEgQTgAAAAnCCQAAIEE4AQAAJAgnAACABOEEAACQIJwAAAAShBMAAECCcAIAAEgQTgAAAAnCCQAAIEE4AQAAJAgnAACABOEEAACQIJwAAAAShBMAAECCcAIAAEgQTgAAAAnCCQAAIEE4AQAAJAgnAACABOEEAACQIJwAAAAShBMAAECCcAIAAEgQTgAAAAnCCQAAIEE4AQAAJAgnAACABOEEAACQIJwAAAAShBMAAECCcAIAAEgQTgAAAAnCCQAAIEE4AQAAJAgnAACABOEEAACQIJwAAAAShBMAAECCcAIAAEgQTgAAAAnCCQAAIEE4AQAAJAgnAACABOEEAACQIJwAAAAShBMAAECCcAIAAEgQTgAAAAnCCQAAIEE4AQAAJAgnAACABOEEAACQIJwAAAAShBMAAECCcAIAAEgQTgAAAAnCCQAAIEE4AQAAJAgnAACABOEEAACQIJwAAAAShBMAAECCcAIAAEgQTgAAAAnCCQAAIEE4AQAAJAgnAACABOEEAACQIJwAAAAShBMAAECCcAIAAEgQTgAAAAlFC6cPP/wwTj/99KioqIhOnTrFueeeGytWrNji+O9973vRs2fP6NixY+y///7xj//4j7Fs2bKCcSUlJRvdJk+eXKzNAAAAiHbFWvHpp58eixYtiqlTp8bHH38cI0aMiPPPPz/uuuuuTY5fuHBhLFy4MK699tro1atXvPnmm3HBBRfEwoUL47e//W3B2Ntuuy0GDRqUv9+pU6dibQYAAECUZFmWbe+Vzps3L3r16hX/9V//FUcccUREREyZMiVOOumkeOedd6KmpqZF67nvvvvijDPOiJUrV0a7ds2NV1JSEg888EAMHTq0xfNZs2ZNrFmzJn8/l8tFbW1tLFu2LCoqKlq+YQAAwG4ll8tFZWVlsg2K8la9mTNnRqdOnfLRFBFRX18fpaWl8dxzz7V4PRsmvyGaNhg1alR06dIl+vfvH7feemuk2m/cuHFRWVmZv9XW1m7dBgEAAG1aUcKpsbExunbtWrCsXbt20blz52hsbGzROt5///248sor4/zzzy9Y/rOf/SzuvffemDp1apx66qlx0UUXxb/+679ucV2jR4+OZcuW5W9vv/321m0QAADQpm3VZ5wuv/zyuPrqq7c4Zt68eZ9rQhHNp8sGDx4cvXr1ip/+9KcFj/3kJz/J//7www+PlStXxi9+8Yv4x3/8x82ur7y8PMrLyz/3vAAAgLZpq8Lp0ksvjXPOOWeLYw488MCorq6OJUuWFCxft25dfPjhh1FdXb3F5y9fvjwGDRoUe++9dzzwwAOxxx57bHF8XV1dXHnllbFmzRpxBAAAFMVWhdO+++4b++67b3LcgAEDYunSpTF79uzo169fREQ8/vjj0dTUFHV1dZt9Xi6Xi4EDB0Z5eXn8x3/8R3To0CH5tebOnRv77LOPaAIAAIqmKJcj/8pXvhKDBg2KkSNHxsSJE+Pjjz+Oiy++OIYNG5a/ot67774bxx13XNxxxx3Rv3//yOVyccIJJ8RHH30U//7v/x65XC5yuVxENAdbWVlZPPzww7F48eL4xje+ER06dIipU6fGz3/+8/jBD35QjM0AAACIiCL+HKc777wzLr744jjuuOOitLQ0Tj311Ljxxhvzj3/88ccxf/78+OijjyIiYs6cOfkr7h188MEF61qwYEF079499thjjxg/fnx8//vfjyzL4uCDD47rrrsuRo4cWazNAAAAKM7PcdrZtfRa7QAAwO6tVX+OEwAAwO5EOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEooWTh9++GGcfvrpUVFREZ06dYpzzz03VqxYscXnHHPMMVFSUlJwu+CCCwrGvPXWWzF48ODYc889o2vXrvHDH/4w1q1bV6zNAAAAiHbFWvHpp58eixYtiqlTp8bHH38cI0aMiPPPPz/uuuuuLT5v5MiR8bOf/Sx/f88998z/fv369TF48OCorq6OZ555JhYtWhRnnXVW7LHHHvHzn/+8WJsCAAC0cSVZlmXbe6Xz5s2LXr16xX/913/FEUccERERU6ZMiZNOOineeeedqKmp2eTzjjnmmOjbt2/ccMMNm3z8P//zP+Nv//ZvY+HChVFVVRURERMnTozLLrss3nvvvWjfvn2L5pfL5aKysjKWLVsWFRUVW7+BAADAbqGlbVCUt+rNnDkzOnXqlI+miIj6+vooLS2N5557bovPvfPOO6NLly7x1a9+NUaPHh0fffRRwXp79+6dj6aIiIEDB0Yul4uXX355s+tcs2ZN5HK5ghsAAEBLFeWteo2NjdG1a9fCL9SuXXTu3DkaGxs3+7x/+Id/iAMOOCBqamrihRdeiMsuuyzmz58f999/f369n46miMjf39J6x40bF1dcccW2bg4AANDGbVU4XX755XH11Vdvccy8efO2eTLnn39+/ve9e/eObt26xXHHHRevv/56HHTQQdu83tGjR0dDQ0P+fi6Xi9ra2m1eHwAA0LZsVThdeumlcc4552xxzIEHHhjV1dWxZMmSguXr1q2LDz/8MKqrq1v89erq6iIi4rXXXouDDjooqqurY9asWQVjFi9eHBGxxfWWl5dHeXl5i78uAADAp21VOO27776x7777JscNGDAgli5dGrNnz45+/fpFRMTjjz8eTU1N+Rhqiblz50ZERLdu3fLr/T//5//EkiVL8m8FnDp1alRUVESvXr22ZlMAAABarCgXh/jKV74SgwYNipEjR8asWbPi6aefjosvvjiGDRuWv6Leu+++G4ccckj+DNLrr78eV155ZcyePTveeOON+I//+I8466yz4lvf+lYcdthhERFxwgknRK9eveLMM8+M//f//l88+uij8eMf/zhGjRrljBIAAFA0RfsBuHfeeWcccsghcdxxx8VJJ50URx11VPz617/OP/7xxx/H/Pnz81fNa9++ffzxj3+ME044IQ455JC49NJL49RTT42HH344/5yysrL4/e9/H2VlZTFgwIA444wz4qyzzir4uU8AAADbW1F+jtPOzs9xAgAAIlr55zgBAADsToQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkCCcAAAAEoQTAABAgnACAABIEE4AAAAJwgkAACBBOAEAACQIJwAAgAThBAAAkNCutSfQGrIsi4iIXC7XyjMBAABa04Ym2NAIm9Mmw2n58uUREVFbW9vKMwEAAHYGy5cvj8rKys0+XpKl0mo31NTUFAsXLoy99947SkpKWnUuuVwuamtr4+23346KiopWncvuyP4tLvu3uOzf4rJ/i88+Li77t7js3+LamfZvlmWxfPnyqKmpidLSzX+SqU2ecSotLY399tuvtadRoKKiotUPmt2Z/Vtc9m9x2b/FZf8Wn31cXPZvcdm/xbWz7N8tnWnawMUhAAAAEoQTAABAgnBqZeXl5TF27NgoLy9v7ansluzf4rJ/i8v+LS77t/js4+Kyf4vL/i2uXXH/tsmLQwAAAGwNZ5wAAAAShBMAAECCcAIAAEgQTgAAAAnCCQAAIEE4FcH48eOje/fu0aFDh6irq4tZs2Ztcfx9990XhxxySHTo0CF69+4df/jDHwoez7IsxowZE926dYuOHTtGfX19vPrqq8XchJ3a1uzfm2++OY4++ujYZ599Yp999on6+vqNxp9zzjlRUlJScBs0aFCxN2OntTX7d9KkSRvtuw4dOhSMcfwW2pr9e8wxx2y0f0tKSmLw4MH5MY7fTzz11FNx8sknR01NTZSUlMSDDz6YfM706dPja1/7WpSXl8fBBx8ckyZN2mjM1n5P311t7f69//774/jjj4999903KioqYsCAAfHoo48WjPnpT3+60fF7yCGHFHErdl5bu3+nT5++ye8PjY2NBeMcv822dv9u6ntrSUlJHHroofkxjt9m48aNi69//eux9957R9euXWPo0KExf/785PN2xde/wmk7u+eee6KhoSHGjh0bc+bMiT59+sTAgQNjyZIlmxz/zDPPxPDhw+Pcc8+N559/PoYOHRpDhw6Nl156KT/mmmuuiRtvvDEmTpwYzz33XOy1114xcODAWL169Y7arJ3G1u7f6dOnx/Dhw+OJJ56ImTNnRm1tbZxwwgnx7rvvFowbNGhQLFq0KH+7++67d8Tm7HS2dv9GRFRUVBTsuzfffLPgccfvJ7Z2/95///0F+/all16KsrKy+Pu///uCcY7fZitXrow+ffrE+PHjWzR+wYIFMXjw4Dj22GNj7ty5cckll8R5551X8OJ+W/5O7K62dv8+9dRTcfzxx8cf/vCHmD17dhx77LFx8sknx/PPP18w7tBDDy04fmfMmFGM6e/0tnb/bjB//vyC/de1a9f8Y47fT2zt/v2Xf/mXgv369ttvR+fOnTf6/uv4jXjyySdj1KhR8eyzz8bUqVPj448/jhNOOCFWrly52efssq9/M7ar/v37Z6NGjcrfX79+fVZTU5ONGzduk+O/+93vZoMHDy5YVldXl/3v//2/syzLsqampqy6ujr7xS9+kX986dKlWXl5eXb33XcXYQt2blu7fz9r3bp12d57753dfvvt+WVnn312NmTIkO091V3S1u7f2267LausrNzs+hy/hT7v8Xv99ddne++9d7ZixYr8MsfvpkVE9sADD2xxzI9+9KPs0EMPLVh22mmnZQMHDszf/7x/ZrurluzfTenVq1d2xRVX5O+PHTs269Onz/ab2G6iJfv3iSeeyCIi+8tf/rLZMY7fTduW4/eBBx7ISkpKsjfeeCO/zPG7aUuWLMkiInvyySc3O2ZXff3rjNN2tHbt2pg9e3bU19fnl5WWlkZ9fX3MnDlzk8+ZOXNmwfiIiIEDB+bHL1iwIBobGwvGVFZWRl1d3WbXubvalv37WR999FF8/PHH0blz54Ll06dPj65du0bPnj3jwgsvjA8++GC7zn1XsK37d8WKFXHAAQdEbW1tDBkyJF5++eX8Y47fT2yP4/eWW26JYcOGxV577VWw3PG7bVLff7fHnxmfaGpqiuXLl2/0/ffVV1+NmpqaOPDAA+P000+Pt956q5VmuGvq27dvdOvWLY4//vh4+umn88sdv9vXLbfcEvX19XHAAQcULHf8bmzZsmURERv9Xf+0XfX1r3Dajt5///1Yv359VFVVFSyvqqra6D3HGzQ2Nm5x/IZft2adu6tt2b+fddlll0VNTU3BX8RBgwbFHXfcEdOmTYurr746nnzyyTjxxBNj/fr123X+O7tt2b89e/aMW2+9NR566KH493//92hqaoojjzwy3nnnnYhw/H7a5z1+Z82aFS+99FKcd955Bcsdv9tuc99/c7lcrFq1art8z+ET1157baxYsSK++93v5pfV1dXFpEmTYsqUKXHTTTfFggUL4uijj47ly5e34kx3Dd26dYuJEyfG7373u/jd734XtbW1ccwxx8ScOXMiYvv8m0mzhQsXxn/+539u9P3X8buxpqamuOSSS+Kb3/xmfPWrX93suF319W+7VvvKsINdddVVMXny5Jg+fXrBBQyGDRuW/33v3r3jsMMOi4MOOiimT58exx13XGtMdZcxYMCAGDBgQP7+kUceGV/5ylfiV7/6VVx55ZWtOLPdzy233BK9e/eO/v37Fyx3/LIruOuuu+KKK66Ihx56qOAzOCeeeGL+94cddljU1dXFAQccEPfee2+ce+65rTHVXUbPnj2jZ8+e+ftHHnlkvP7663H99dfHv/3bv7XizHY/t99+e3Tq1CmGDh1asNzxu7FRo0bFSy+9tNt+1ssZp+2oS5cuUVZWFosXLy5Yvnjx4qiurt7kc6qrq7c4fsOvW7PO3dW27N8Nrr322rjqqqvisccei8MOO2yLYw888MDo0qVLvPbaa597zruSz7N/N9hjjz3i8MMPz+87x+8nPs/+XblyZUyePLlF/xC31eN3W2zu+29FRUV07Nhxu/ydIGLy5Mlx3nnnxb333rvRW3M+q1OnTvHlL3/Z8buN+vfvn993jt/tI8uyuPXWW+PMM8+M9u3bb3FsWz9+L7744vj9738fTzzxROy3335bHLurvv4VTttR+/bto1+/fjFt2rT8sqamppg2bVrB/8p/2oABAwrGR0RMnTo1P75Hjx5RXV1dMCaXy8Vzzz232XXurrZl/0Y0X5XlyiuvjClTpsQRRxyR/DrvvPNOfPDBB9GtW7ftMu9dxbbu309bv359vPjii/l95/j9xOfZv/fdd1+sWbMmzjjjjOTXaavH77ZIff/dHn8n2rq77747RowYEXfffXfBZfQ3Z8WKFfH66687frfR3Llz8/vO8bt9PPnkk/Haa6+16D+u2urxm2VZXHzxxfHAAw/E448/Hj169Eg+Z5d9/dtql6XYTU2ePDkrLy/PJk2alP33f/93dv7552edOnXKGhsbsyzLsjPPPDO7/PLL8+OffvrprF27dtm1116bzZs3Lxs7dmy2xx57ZC+++GJ+zFVXXZV16tQpe+ihh7IXXnghGzJkSNajR49s1apVO3z7WtvW7t+rrroqa9++ffbb3/42W7RoUf62fPnyLMuybPny5dkPfvCDbObMmdmCBQuyP/7xj9nXvva17Etf+lK2evXqVtnG1rS1+/eKK67IHn300ez111/PZs+enQ0bNizr0KFD9vLLL+fHOH4/sbX7d4OjjjoqO+200zZa7vgttHz58uz555/Pnn/++Swisuuuuy57/vnnszfffDPLsiy7/PLLszPPPDM//n/+53+yPffcM/vhD3+YzZs3Lxs/fnxWVlaWTZkyJT8m9WfWlmzt/r3zzjuzdu3aZePHjy/4/rt06dL8mEsvvTSbPn16tmDBguzpp5/O6uvrsy5dumRLlizZ4dvX2rZ2/15//fXZgw8+mL366qvZiy++mP3TP/1TVlpamv3xj3/Mj3H8fmJr9+8GZ5xxRlZXV7fJdTp+m1144YVZZWVlNn369IK/6x999FF+zO7y+lc4FcG//uu/Zvvvv3/Wvn37rH///tmzzz6bf+zb3/52dvbZZxeMv/fee7Mvf/nLWfv27bNDDz00e+SRRwoeb2pqyn7yk59kVVVVWXl5eXbcccdl8+fP3xGbslPamv17wAEHZBGx0W3s2LFZlmXZRx99lJ1wwgnZvvvum+2xxx7ZAQcckI0cObJN/qOywdbs30suuSQ/tqqqKjvppJOyOXPmFKzP8Vtoa78/vPLKK1lEZI899thG63L8FtpweebP3jbs07PPPjv79re/vdFz+vbtm7Vv3z478MADs9tuu22j9W7pz6wt2dr9++1vf3uL47Os+fLv3bp1y9q3b5/9zd/8TXbaaadlr7322o7dsJ3E1u7fq6++OjvooIOyDh06ZJ07d86OOeaY7PHHH99ovY7fZtvy/WHp0qVZx44ds1//+tebXKfjt9mm9mtEFHw/3V1e/5ZkWZYV7XQWAADAbsBnnAAAABKEEwAAQIJwAgAASBBOAAAACcIJAAAgQTgBAAAkCCcAAIAE4QQAAJAgnAAAABKEEwAAQIJwAgAASPj/Aeg2CHaOz12ZAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Draw the shell\n",
    "s.draw(qubit_data=qubit_data, xcolor='green', zcolor='yellow', show_face_ids=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87d63d47",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
